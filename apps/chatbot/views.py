# apps/chatbot/views.py - VERSI√ìN OPTIMIZADA CON GPT-4
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.conf import settings
from django.core.cache import cache
from django.utils import timezone
import json
from django.test import RequestFactory
from datetime import datetime, timedelta
import hashlib
import re
from unicodedata import normalize


# ============================================
# UTILIDADES B√ÅSICAS (SIN HARDCODEAR DATOS)
# ============================================

class TextNormalizer:
    """
    Normalizaci√≥n b√°sica de texto - El resto lo hace GPT-4
    """
    
    @staticmethod
    def normalizar_basico(texto):
        """
        Normalizaci√≥n b√°sica: min√∫sculas, espacios, etc.
        NO corrige ortograf√≠a (eso lo hace GPT-4)
        """
        if not texto:
            return ""
        
        texto = texto.lower().strip()
        texto = normalize('NFKD', texto).encode('ASCII', 'ignore').decode('ASCII')
        texto = re.sub(r'\s+', ' ', texto)
        
        return texto


# ============================================
# SISTEMA DE MEMORIA (SIMPLIFICADO)
# ============================================

class ChatbotMemory:
    """
    Sistema de memoria optimizado - GPT-4 hace el an√°lisis sem√°ntico
    """
    
    @staticmethod
    def generar_hash_consulta(query):
        """Genera hash para cach√©"""
        query_norm = TextNormalizer.normalizar_basico(query)
        return hashlib.md5(query_norm.encode()).hexdigest()
    
    @staticmethod
    def registrar_consulta_exitosa(query, funcion_usada, resultado):
        """Registra consultas exitosas"""
        hash_query = ChatbotMemory.generar_hash_consulta(query)
        cache_key = f"chatbot_success_{hash_query}"
        
        data = {
            'query': query,
            'funcion': funcion_usada,
            'timestamp': datetime.now().isoformat(),
            'tuvo_resultados': bool(resultado.get('servicios') or resultado.get('destinos') or resultado.get('data'))
        }
        
        cache.set(cache_key, data, timeout=86400 * 30)
        
        counter_key = f"chatbot_success_count_{funcion_usada}"
        count = cache.get(counter_key, 0)
        cache.set(counter_key, count + 1, timeout=86400 * 30)
    
    @staticmethod
    def registrar_error(query, error_msg):
        """Registra errores"""
        hash_query = ChatbotMemory.generar_hash_consulta(query)
        cache_key = f"chatbot_error_{hash_query}"
        
        data = {
            'query': query,
            'error': error_msg,
            'timestamp': datetime.now().isoformat(),
            'count': cache.get(cache_key, {}).get('count', 0) + 1
        }
        
        cache.set(cache_key, data, timeout=86400 * 7)


# ============================================
# CLIENTE OPENAI
# ============================================

def get_openai_client():
    """Inicializa el cliente de OpenAI"""
    from openai import OpenAI
    
    api_key = settings.OPENAI_API_KEY
    if not api_key:
        raise ValueError("OPENAI_API_KEY no configurada")
    
    return OpenAI(api_key=api_key)


# ============================================
# HERRAMIENTAS (FUNCIONES)
# ============================================

TOOLS = [
    {
        "type": "function",
        "function": {
            "name": "buscar_servicios",
            "description": "Busca servicios tur√≠sticos por PALABRAS CLAVE (no nombres exactos). La b√∫squeda es flexible y encuentra coincidencias parciales. Ejemplos: 'oro verde' encuentra 'Oro Verde Manta', 'hilton' encuentra 'Hilton Colon Quito'.",
            "parameters": {
                "type": "object",
                "properties": {
                    "q": {
                        "type": "string",
                        "description": "PALABRAS CLAVE del servicio (NO nombre completo). Ejemplos: 'oro verde' (no 'Hotel Oro Verde'), 'hilton' (no 'Hotel Hilton Colon'), 'casa cangrejo' (no 'Restaurante La Casa del Cangrejo'). Elimina palabras gen√©ricas como 'hotel', 'restaurante', 'tour'."
                    },
                    "tipo": {
                        "type": "string",
                        "enum": ["alojamiento", "tour", "actividad", "transporte", "gastronomia"],
                        "description": "Tipo de servicio"
                    },
                    "region": {
                        "type": "string",
                        "enum": ["costa", "sierra", "oriente", "galapagos"],
                        "description": "Regi√≥n de Ecuador"
                    },
                    "precio_max": {
                        "type": "number",
                        "description": "Precio m√°ximo en d√≥lares"
                    }
                }
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "buscar_destinos",
            "description": "Busca destinos tur√≠sticos por PALABRAS CLAVE (ciudades, lugares, atractivos). B√∫squeda flexible que encuentra coincidencias parciales.",
            "parameters": {
                "type": "object",
                "properties": {
                    "q": {
                        "type": "string",
                        "description": "PALABRAS CLAVE del destino (ciudad, provincia, lugar). Usa palabras distintivas. Ejemplos: 'quito', 'cuenca', 'galapagos'. Normaliza nombres (ej: 'Kito' ‚Üí 'quito', 'Guayakil' ‚Üí 'guayaquil')"
                    },
                    "region": {
                        "type": "string",
                        "enum": ["costa", "sierra", "oriente", "galapagos"],
                        "description": "Regi√≥n espec√≠fica"
                    }
                },
                "required": ["q"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "obtener_destinos_por_region",
            "description": "Obtiene los mejores destinos de una regi√≥n completa.",
            "parameters": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "enum": ["costa", "sierra", "oriente", "galapagos"]
                    }
                },
                "required": ["region"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "obtener_estadisticas_servicios",
            "description": "Estad√≠sticas generales de servicios disponibles",
            "parameters": {"type": "object", "properties": {}}
        }
    },
    {
        "type": "function",
        "function": {
            "name": "obtener_estadisticas_destinos",
            "description": "Estad√≠sticas generales de destinos tur√≠sticos",
            "parameters": {"type": "object", "properties": {}}
        }
    },
    {
        "type": "function",
        "function": {
            "name": "comparar_servicios",
            "description": "Compara m√∫ltiples servicios por precio y calificaci√≥n",
            "parameters": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "string",
                        "description": "IDs separados por comas (ej: '1,2,3')"
                    }
                },
                "required": ["ids"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "obtener_recomendaciones",
            "description": "Recomendaciones personalizadas seg√∫n criterios del usuario",
            "parameters": {
                "type": "object",
                "properties": {
                    "presupuesto": {"type": "number"},
                    "tipo": {
                        "type": "string",
                        "enum": ["alojamiento", "tour", "actividad", "transporte", "gastronomia"]
                    },
                    "region": {
                        "type": "string",
                        "enum": ["costa", "sierra", "oriente", "galapagos"]
                    },
                    "personas": {"type": "integer"}
                }
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "obtener_estadisticas_reservas",
            "description": "Estad√≠sticas generales de reservas del sistema",
            "parameters": {"type": "object", "properties": {}}
        }
    },
    {
        "type": "function",
        "function": {
            "name": "obtener_mis_estadisticas",
            "description": "Estad√≠sticas personales del usuario autenticado",
            "parameters": {"type": "object", "properties": {}}
        }
    }
]


# ============================================
# SYSTEM PROMPT OPTIMIZADO
# ============================================

SYSTEM_PROMPT = """Eres "Gu√≠a Ecuador" üá™üá®, el asistente tur√≠stico inteligente de Ecuador.

üéØ **TU MISI√ìN:**
Ayudar a turistas con informaci√≥n REAL y VERIFICADA de nuestra base de datos.

üß† **CAPACIDADES ESPECIALES:**
1. **CORRECCI√ìN ORTOGR√ÅFICA AUTOM√ÅTICA:**
   - El usuario puede escribir con errores: "hoteles en kito" ‚Üí interpretas "Quito"
   - Nombres mal escritos: "Guayakil" ‚Üí "Guayaquil", "Cuenka" ‚Üí "Cuenca"
   - Palabras en espa√±ol: "resturante" ‚Üí "restaurante", "hospedage" ‚Üí "hospedaje"
   - SIEMPRE normaliza y corrige ANTES de llamar funciones

2. **B√öSQUEDA FLEXIBLE Y POR PALABRAS CLAVE:**
   - Usuario dice "Hotel Oro Verde" ‚Üí busca q="oro verde" (palabras clave principales)
   - Usuario dice "restaurante El Coral" ‚Üí busca q="coral" o q="el coral"
   - Si el nombre tiene ubicaci√≥n, sep√°rala: "Oro Verde Manta" ‚Üí busca "oro verde" con filtros
   - **REGLA DE ORO**: Usa las palabras m√°s distintivas del nombre, NO el nombre completo
   
   Ejemplos:
   ‚úÖ "Hotel Oro Verde" ‚Üí buscar_servicios(q="oro verde", tipo="alojamiento")
   ‚úÖ "Hilton Colon Quito" ‚Üí buscar_servicios(q="hilton colon", tipo="alojamiento")
   ‚úÖ "tour galapagos" ‚Üí buscar_servicios(q="galapagos", tipo="tour")
   ‚ùå NO uses el nombre exacto completo si no hay resultados

3. **ESTRATEGIA DE B√öSQUEDA INCREMENTAL:**
   - Primer intento: busca con palabras clave principales
   - Si no hay resultados: prueba con menos palabras o variaciones
   - Ejemplos:
     * "Hotel Oro Verde Guayaquil" ‚Üí primero "oro verde", luego "oro verde" + region
     * "Restaurante La Casa del Cangrejo" ‚Üí primero "casa cangrejo", luego "cangrejo"

4. **DIFERENCIACI√ìN CLARA:**
   - üè® SERVICIOS = Cosas que se RESERVAN (hoteles, tours, restaurantes, transporte)
   - üèûÔ∏è DESTINOS = Lugares que se VISITAN (ciudades, provincias, atractivos)
   
   Ejemplos:
   - "hoteles en Quito" ‚Üí buscar_servicios(q="quito", tipo="alojamiento")
   - "qu√© visitar en Quito" ‚Üí buscar_destinos(q="quito")
   - "restaurantes en la sierra" ‚Üí buscar_servicios(tipo="gastronomia", region="sierra")
   - "Hotel Oro Verde" ‚Üí buscar_servicios(q="oro verde", tipo="alojamiento")

4. **PAR√ÅMETROS INTELIGENTES:**
   - Regiones v√°lidas: costa, sierra, oriente, galapagos (MIN√öSCULAS, sin art√≠culos)
   - Si el usuario dice "en la costa" ‚Üí usa region="costa"
   - Combina m√∫ltiples filtros cuando sea apropiado
   - **IMPORTANTE**: El par√°metro 'q' debe contener solo palabras clave distintivas

üö´ **PROHIBIDO:**
- Usar nombres completos en el par√°metro 'q' (ej: ‚ùå "Hotel Oro Verde Manta", ‚úÖ "oro verde")
- Inventar datos que no est√°n en los resultados
- Mencionar lugares/servicios que no aparecen en la respuesta de las funciones
- Ignorar errores ortogr√°ficos del usuario (SIEMPRE normaliza primero)
- Responder sin consultar las funciones cuando se necesita informaci√≥n espec√≠fica
- Incluir palabras gen√©ricas en b√∫squedas: ‚ùå "hotel oro verde" ‚Üí ‚úÖ "oro verde"

‚úÖ **FLUJO DE TRABAJO:**
1. Usuario env√≠a mensaje (puede tener errores, puede ser nombre completo)
2. T√ö extraes las palabras CLAVE distintivas (elimina "hotel", "restaurante", ubicaciones obvias)
3. Llamas a la funci√≥n con palabras clave + filtros (tipo, regi√≥n)
4. Si NO hay resultados, prueba con menos palabras o sin filtros
5. Respondes bas√°ndote SOLO en los resultados reales
6. Si a√∫n no hay resultados, lo dices claramente y ofreces alternativas

üìè **ESTILO:**
- Conciso: m√°ximo 150 palabras
- Amigable y profesional
- Usa emojis moderadamente (2-3 por mensaje)
- Siempre termina con pregunta de seguimiento
- Si corriges ortograf√≠a del usuario, hazlo de forma natural sin se√±alarlo

**EJEMPLO DE B√öSQUEDA CORRECTA:**
Usuario: "buscame hotel oro verde"
T√ö piensas: "Quiere el hotel Oro Verde, pero debo buscar por palabras clave"
T√ö llamas: buscar_servicios(q="oro verde", tipo="alojamiento")
Base de datos tiene: "Oro Verde Manta", "Oro Verde Guayaquil"
T√ö respondes: "¬°Encontr√© 2 opciones del Oro Verde! üè®
1. **Oro Verde Manta**...
2. **Oro Verde Guayaquil**...
¬øCu√°l te interesa?"

**EJEMPLO DE B√öSQUEDA INCREMENTAL:**
Usuario: "Hotel Hilton Colon Quito"
Intento 1: buscar_servicios(q="hilton colon", tipo="alojamiento") ‚Üí ‚úÖ encuentra
Si no encuentra:
Intento 2: buscar_servicios(q="hilton", tipo="alojamiento") ‚Üí buscar alternativa

**NUNCA DIGAS:** "No encontr√© 'Hotel Oro Verde' exacto" 
**S√ç DI:** "No encontr√© hoteles con ese nombre" (despu√©s de intentar variaciones)"""


# ============================================
# EJECUTOR DE FUNCIONES
# ============================================

def ejecutar_funcion(nombre_funcion, parametros, request=None):
    """
    Ejecuta funciones AJAX con validaci√≥n
    """
    from apps.servicios.views import (
        buscar_servicios_ajax,
        estadisticas_servicios_ajax,
        comparar_servicios_ajax,
        recomendaciones_ajax
    )
    from apps.destinos.views import (
        busqueda_ajax,
        estadisticas_destinos_ajax,
        destinos_por_region_ajax
    )
    from apps.reservas.views import (
        estadisticas_reservas_ajax,
        mis_estadisticas_ajax
    )
    
    # Limpiar par√°metros (remover vac√≠os y None)
    parametros_limpios = {
        k: v for k, v in parametros.items()
        if v is not None and v != "" and v != 0
    }
    
    factory = RequestFactory()
    
    try:
        # SERVICIOS
        if nombre_funcion == "buscar_servicios":
            req = factory.get('/ajax/buscar-servicios/', parametros_limpios)
            response = buscar_servicios_ajax(req)
            return json.loads(response.content)
        
        elif nombre_funcion == "obtener_estadisticas_servicios":
            req = factory.get('/ajax/estadisticas-servicios/')
            response = estadisticas_servicios_ajax(req)
            return json.loads(response.content)
        
        elif nombre_funcion == "comparar_servicios":
            req = factory.get('/ajax/comparar-servicios/', parametros_limpios)
            response = comparar_servicios_ajax(req)
            return json.loads(response.content)
        
        elif nombre_funcion == "obtener_recomendaciones":
            req = factory.get('/ajax/recomendaciones/', parametros_limpios)
            response = recomendaciones_ajax(req)
            return json.loads(response.content)
        
        # DESTINOS
        elif nombre_funcion == "buscar_destinos":
            req = factory.get('/destinos/ajax/busqueda/', parametros_limpios)
            response = busqueda_ajax(req)
            return json.loads(response.content)
        
        elif nombre_funcion == "obtener_destinos_por_region":
            region = parametros_limpios.get('region', '')
            if not region:
                return {"error": "Debe especificar una regi√≥n", "success": False}
            req = factory.get(f'/destinos/ajax/region/{region}/')
            response = destinos_por_region_ajax(req, region)
            return json.loads(response.content)
        
        elif nombre_funcion == "obtener_estadisticas_destinos":
            req = factory.get('/destinos/ajax/estadisticas/')
            response = estadisticas_destinos_ajax(req)
            return json.loads(response.content)
        
        # RESERVAS
        elif nombre_funcion == "obtener_estadisticas_reservas":
            req = factory.get('/ajax/estadisticas-reservas/')
            response = estadisticas_reservas_ajax(req)
            return json.loads(response.content)
        
        elif nombre_funcion == "obtener_mis_estadisticas":
            if not request or not request.user.is_authenticated:
                return {
                    "error": "Debes iniciar sesi√≥n para ver tus estad√≠sticas",
                    "success": False
                }
            req = factory.get('/ajax/mis-estadisticas/')
            req.user = request.user
            response = mis_estadisticas_ajax(req)
            return json.loads(response.content)
        
        return {"error": f"Funci√≥n {nombre_funcion} no encontrada", "success": False}
    
    except Exception as e:
        import traceback
        print(f"‚ùå Error ejecutando {nombre_funcion}: {str(e)}")
        print(traceback.format_exc())
        return {"error": str(e), "success": False, "traceback": traceback.format_exc()[:500]}


# ============================================
# VISTA PRINCIPAL DEL CHATBOT
# ============================================

@require_http_methods(["POST"])
def chatbot_message(request):
    """
    Procesa mensajes del chatbot con GPT-4 (maneja errores ortogr√°ficos autom√°ticamente)
    """
    try:
        data = json.loads(request.body)
        mensaje_usuario = data.get('message', '').strip()
        historial = data.get('history', [])
        
        if not mensaje_usuario:
            return JsonResponse({
                'success': False,
                'error': 'Mensaje vac√≠o'
            }, status=400)
        
        # Construir mensajes para GPT-4
        mensajes = [{"role": "system", "content": SYSTEM_PROMPT}]
        
        # Incluir historial reciente (√∫ltimos 10 mensajes)
        for msg in historial[-10:]:
            if msg.get('role') in ['user', 'assistant']:
                mensajes.append({
                    "role": msg['role'],
                    "content": msg.get('content', '')
                })
        
        # Agregar mensaje actual
        mensajes.append({
            "role": "user",
            "content": mensaje_usuario
        })
        
        # ========================================
        # PRIMERA LLAMADA A GPT-4
        # ========================================
        client = get_openai_client()
        
        respuesta_inicial = client.chat.completions.create(
            model="gpt-4-turbo-preview",  # Cambiar a "gpt-4o" si tienes acceso
            messages=mensajes,
            tools=TOOLS,
            tool_choice="auto",
            temperature=0.7,
            max_tokens=600
        )
        
        mensaje_asistente = respuesta_inicial.choices[0].message
        
        # ========================================
        # PROCESAR LLAMADAS A FUNCIONES
        # ========================================
        if mensaje_asistente.tool_calls:
            resultados_funciones = []
            
            for tool_call in mensaje_asistente.tool_calls:
                nombre_funcion = tool_call.function.name
                
                try:
                    argumentos = json.loads(tool_call.function.arguments)
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è Error parseando argumentos: {e}")
                    argumentos = {}
                
                # Ejecutar funci√≥n
                print(f"üîß Ejecutando: {nombre_funcion}({argumentos})")
                resultado = ejecutar_funcion(nombre_funcion, argumentos, request)
                
                # Registrar en memoria
                if resultado.get('success'):
                    ChatbotMemory.registrar_consulta_exitosa(
                        mensaje_usuario,
                        nombre_funcion,
                        resultado
                    )
                else:
                    print(f"‚ö†Ô∏è Funci√≥n retorn√≥ error: {resultado.get('error')}")
                
                resultados_funciones.append({
                    "tool_call_id": tool_call.id,
                    "nombre": nombre_funcion,
                    "argumentos": argumentos,
                    "resultado": resultado,
                    "exitoso": resultado.get('success', False)
                })
            
            # ========================================
            # SEGUNDA LLAMADA CON RESULTADOS
            # ========================================
            
            # Construir mensajes con resultados de funciones
            mensajes_con_resultados = mensajes + [
                {
                    "role": "assistant",
                    "content": None,
                    "tool_calls": mensaje_asistente.tool_calls
                }
            ]
            
            # Agregar resultados de cada funci√≥n
            for res in resultados_funciones:
                mensajes_con_resultados.append({
                    "role": "tool",
                    "tool_call_id": res["tool_call_id"],
                    "name": res["nombre"],
                    "content": json.dumps(res["resultado"], ensure_ascii=False)
                })
            
            # Agregar instrucciones finales
            instrucciones_finales = """
RESULTADOS OBTENIDOS. Ahora responde al usuario:

üéØ REGLAS CR√çTICAS:
1. Usa SOLO los datos de los resultados anteriores
2. Si 'servicios' o 'destinos' est√° vac√≠o ‚Üí di "No encontr√©..."
3. S√© conciso (m√°ximo 150 palabras)
4. Incluye enlaces solo si hay IDs reales
5. Termina con pregunta de seguimiento
6. Si encontraste m√∫ltiples opciones del mismo nombre en diferentes ubicaciones, menci√≥nalas todas

EJEMPLOS DE RESPUESTAS CORRECTAS:
‚úÖ Usuario busc√≥ "Hotel Oro Verde" y encontraste 2:
"¬°Encontr√© 2 opciones del Oro Verde! üè®
1. **Oro Verde Manta** - $120/noche ‚≠ê4.5
2. **Oro Verde Guayaquil** - $150/noche ‚≠ê4.8
¬øCu√°l ubicaci√≥n prefieres?"

‚úÖ Usuario busc√≥ "Hilton" y encontraste 1:
"¬°Perfecto! Encontr√© el **Hilton Colon Quito** üè®..."

‚ùå NO digas: "No encontr√© 'Hotel Oro Verde' exactamente" (si lo encontraste con b√∫squeda flexible)

NO inventes datos. NO menciones lugares que no aparecen en los resultados."""
            
            mensajes_con_resultados.append({
                "role": "user",
                "content": instrucciones_finales
            })
            
            # Generar respuesta final
            respuesta_final = client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=mensajes_con_resultados,
                temperature=0.7,
                max_tokens=500
            )
            
            respuesta_texto = respuesta_final.choices[0].message.content
            
            debug_info = {
                'funciones_usadas': [r['nombre'] for r in resultados_funciones],
                'argumentos': [r['argumentos'] for r in resultados_funciones],
                'resultados_exitosos': [r['exitoso'] for r in resultados_funciones]
            }
        else:
            # No se necesitaron funciones
            respuesta_texto = mensaje_asistente.content or "Lo siento, no pude generar una respuesta."
            debug_info = {'funciones_usadas': [], 'mensaje': 'Respuesta directa sin funciones'}
        
        return JsonResponse({
            'success': True,
            'response': respuesta_texto,
            'debug': debug_info if settings.DEBUG else None
        })
        
    except Exception as e:
        import traceback
        error_msg = str(e)
        error_trace = traceback.format_exc()
        
        print(f"‚ùå Error en chatbot: {error_msg}")
        print(error_trace)
        
        # Registrar error
        if 'mensaje_usuario' in locals():
            ChatbotMemory.registrar_error(mensaje_usuario, error_msg)
        
        # Respuesta amigable al usuario
        return JsonResponse({
            'success': False,
            'error': 'Lo siento, ocurri√≥ un error al procesar tu mensaje. Por favor intenta de nuevo.',
            'debug': {'error': error_msg, 'trace': error_trace[:500]} if settings.DEBUG else None
        }, status=500)


@require_http_methods(["POST"])
def limpiar_historial(request):
    """Limpia el historial del chat"""
    return JsonResponse({'success': True, 'message': 'Historial limpiado'})


@require_http_methods(["GET"])
def estadisticas_chatbot(request):
    """
    Obtiene estad√≠sticas de uso del chatbot (solo para admins)
    """
    if not request.user.is_authenticated or request.user.rol.nombre != 'administrador':
        return JsonResponse({'error': 'No autorizado'}, status=403)
    
    try:
        stats = {
            'funciones_mas_usadas': {},
            'total_consultas': 0
        }
        
        # Obtener contadores de funciones
        funciones = [
            'buscar_servicios', 'buscar_destinos', 'obtener_estadisticas_servicios',
            'obtener_estadisticas_destinos', 'comparar_servicios', 'obtener_recomendaciones',
            'obtener_destinos_por_region', 'obtener_estadisticas_reservas', 'obtener_mis_estadisticas'
        ]
        
        for func in funciones:
            count = cache.get(f"chatbot_success_count_{func}", 0)
            if count > 0:
                stats['funciones_mas_usadas'][func] = count
                stats['total_consultas'] += count
        
        return JsonResponse({
            'success': True,
            'estadisticas': stats
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)